version: 2.1

orbs: 
  aws-cli: circleci/aws-cli@3.1.0
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy all created environments
    steps:
      - run:
          name: Destroy frontend
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration only if it is successful
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl https://keyvalue.immanuel.co/api/KeyVal/GetValue/tozkr10c/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-DBMigrationStatus)
            if [ ${SUCCESS} = "success" ];
            then
              cd ~/project/backend
              npm i
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-1]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-1]
      - run:
          name: Back-end build
          command: |
             cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-1
  test-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-1]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm run test                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-1]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [frontend-build-1]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-1]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify:
            event: fail
            template: basic_fail_1
      - slack/notify:
            event: pass
            template: success_tagged_deploy_1
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install needed dependencies
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople
      - run:
          name: Add udapeople-backend ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            TEST=$(curl -X POST https://keyvalue.immanuel.co/api/KeyVal/UpdateValue/tozkr10c/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-BackendIP/${BACKEND_IP} -d ${BACKEND_IP})
            echo ${TEST}
            echo ${BACKEND_IP} >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b0:48:09:34:9a:d7:d0:5e:c3:62:6b:e2:03:c6:41:2f"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
        user: root
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt -y install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install

            echo ENVIROMENT=development > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

            MIGRATIONS_OUTPUT=$(npm run migrations)
      - run:
          name: Send migration results to keyvalue.immanuel.co
          command: |
            echo ${MIGRATIONS_OUTPUT}
            if grep -q "has been executed successfully" ${MIGRATIONS_OUTPUT}; then
              curl -X POST https://keyvalue.immanuel.co/api/KeyVal/UpdateValue/tozkr10c/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-DBMigrationStatus/success -d success
            else
              curl -X POST https://keyvalue.immanuel.co/api/KeyVal/UpdateValue/tozkr10c/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-DBMigrationStatus/failure -d failure
            fi
      - destroy-environment
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
        user: root
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt -y install awscli
      - run:
          name: Set env variables
          command: |
            BACKEND_IP=$(curl GET https://keyvalue.immanuel.co/api/KeyVal/GetValue/tozkr10c/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-BackendIP)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL=$API_URL >> "frontend/.env"
            echo ENVIRONMENT=production  >> "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
      - run:
          name: Build frontend objects
          command: |
            cd frontend
            npm i
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 sync frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: cimg/python:3.10.0-node
        user: root
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b0:48:09:34:9a:d7:d0:5e:c3:62:6b:e2:03:c6:41:2f"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: install dependencies
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
            pip install awscli
      - run:
          name: install node modules
          command: |
            cd /root/project/backend
            npm install
      - run:
          name: build backend dist
          command: |
            cd /root/project/backend
            npm i
            echo ENVIROMENT=development > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm run build
            npm run prestart:prod
      - run:
          name: build zip file
          command: |
            cd /root/project/
            tar -zcvf api.tar.gz backend/
            mv api.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
      - run:
          name: add ansible config
          command: |
            echo "[ssh_connection]" > ansible.cfg
            echo "scp_if_ssh=True" >> ansible.cfg
      - run:
          name: Deploy backend
          command: |
            echo $(curl https://keyvalue.immanuel.co/api/KeyVal/GetValue/tozkr10c/UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-BackendIP) >> .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment
      - revert-migrations
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
          context: Alx
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
     